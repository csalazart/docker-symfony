#!/bin/bash

declare CODE_NUM
declare -a CODE_NAME CODE_DIR CODE_VOLUME CODE_WEB_ROOT CODE_WEB_DOMAIN
export CODE_NUM CODE_NAME CODE_DIR CODE_VOLUME CODE_WEB_ROOT CODE_WEB_DOMAIN

existsVirtualMachine() {
  "${VBOXMANAGE}" showvminfo "${VM_NAME}" --machinereadable &> /dev/null || return 1
}

runningDockerMachine() {
  local VM_STATUS="$("${DOCKER_MACHINE}" status "${VM_NAME}" 2>&1)" || return 1
  [ "${VM_STATUS}" = "Running" ]
}

createDockerMachine() {
  "${DOCKER_MACHINE}" rm -f "${VM_NAME}" &> /dev/null || :
  rm -rf "$HOME/.docker/machine/machines/${VM_NAME}"
  
  declare -a CREATE_OPTIONS
  
  #fixed boot2docker.iso version
  if [ -n "$VM_VERSION" ] ; then
    CREATE_OPTIONS+=( --virtualbox-boot2docker-url "https://github.com/boot2docker/boot2docker/releases/download/${VM_VERSION}/boot2docker.iso" )
  fi

  #set proxy variables if they exists
  if [ "${HTTP_PROXY}" ]; then
    CREATE_OPTIONS+=( --engine-env "HTTP_PROXY=$HTTP_PROXY" )
  fi
  if [ "${HTTPS_PROXY}" ]; then
    CREATE_OPTIONS+=( --engine-env "HTTPS_PROXY=$HTTPS_PROXY" )
  fi
  if [ "${NO_PROXY}" ]; then
    CREATE_OPTIONS+=( --engine-env "NO_PROXY=$NO_PROXY" )
  fi
  
  "${DOCKER_MACHINE}" create -d virtualbox "${CREATE_OPTIONS[@]}" "${VM_NAME}"
}

startDockerMachine() {
  local VM_STATUS="$("${DOCKER_MACHINE}" status "${VM_NAME}" 2>&1)"
  if [ "${VM_STATUS}" != "Running" ]; then
    "${DOCKER_MACHINE}" start "${VM_NAME}"
    yes | "${DOCKER_MACHINE}" regenerate-certs "${VM_NAME}"
  fi
}						

staticMachineIp() {
  machine="$1"
  local ip=${2:-$(docker-machine ip $machine)}
  local broadcast=${ip%.*}.255

  echo -e "Change static ip on ${VM_NAME} to ${GREEN}${ip}${NC}"
  # Create the bootsync.sh file
  cat <<EOF | docker-machine ssh $machine "sudo tee /var/lib/boot2docker/bootsync.sh >/dev/null"
#!/bin/sh
# This file was automatically generated by running "$(basename $BASH_SOURCE)" from the docker-machine host
# IP=$ip
# Stop the DHCP service for our host-only inteface
[[ -f /var/run/udhcpc.eth1.pid ]] && kill \$(cat /var/run/udhcpc.eth1.pid) 2>/dev/null || :
# Configure the interface to use the assigned IP address as a static address
ifconfig eth1 $ip netmask 255.255.255.0 broadcast $broadcast up
EOF

  # Set the bootsync.sh file as executable
  "${DOCKER_MACHINE}" ssh "${VM_NAME}" "sudo chmod u+x /var/lib/boot2docker/bootsync.sh"

  # Go ahead and run the script to switch to static ip mode
  #"${DOCKER_MACHINE}" ssh "${VM_NAME}" "sudo /var/lib/boot2docker/bootsync.sh"
  "${DOCKER_MACHINE}" stop "${VM_NAME}"
}

shareVboxDockerFolder() {
set +e
  if ! "${VBOXMANAGE}" showvminfo "${VM_NAME}" --machinereadable | grep -q "SharedFolderName[^=]*=\"$PROJECT_NAME\"" ; then
	echo "Share on $VM_NAME folder $PROJECT_DIR with name $PROJECT_NAME"
	"${VBOXMANAGE}" sharedfolder add "${VM_NAME}" --name "$PROJECT_NAME" --hostpath "$PROJECT_DIR" --transient
	"${DOCKER_MACHINE}" ssh "${VM_NAME}" "sudo mkdir -p '$PROJECT_DIR' ; sudo /sbin/mount.vboxsf -o uid=48,gid=48 '$PROJECT_NAME' '$PROJECT_DIR'"
  fi
set -e
}

shareVboxProjectsFolder() {
  for i in $(seq 1 ${CODE_NUM}) ; do
    if [[ -n "${CODE_DIR[i]}" && -n "${CODE_VOLUME[i]}" ]] ; then
      if ! "${VBOXMANAGE}" showvminfo "${VM_NAME}" --machinereadable | grep -q "SharedFolderName[^=]*=\"${CODE_NAME[i]}\"" ; then
        echo "Share on $VM_NAME folder ${CODE_DIR[i]} with name ${CODE_NAME[i]}"
        "${VBOXMANAGE}" sharedfolder add "${VM_NAME}" --name "${CODE_NAME[i]}" --hostpath "${CODE_DIR[i]}" --transient
        #"${DOCKER_MACHINE}" ssh "${VM_NAME}" "sudo mkdir -p '${CODE_DIR[i]}' ; sudo /sbin/mount.vboxsf -o uid=48,gid=48 '${CODE_NAME[i]}' '${CODE_DIR[i]}'"
      fi
    fi
  done
}

printDockerMachineInfo() {
  VM_IP="$("${DOCKER_MACHINE}" ip "${VM_NAME}")"
  VM_VERSION="$("${DOCKER_MACHINE}" version "${VM_NAME}")"
  
  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM_NAME}${NC} machine with IP ${GREEN}${VM_IP}${NC} and version ${GREEN}${VM_VERSION}${NC}"
  echo -e "For help getting started, check out the docs at https://docs.docker.com"
  echo 
}

readProjectsConfig() {
  CODE_NUM=0
  for prjConf in projects/*.conf ; do
    if [[ ! -f "${prjConf%.conf}.disabled" ]] ; then
      NAME=""
      TYPE=""
      DIR=""
      VOLUME=""
      WEB_ROOT=""
      WEB_DOMAIN=""

      source "$prjConf"
      localFile="${prjConf%.conf}.local"
      if [ -f "${localFile}" ] ; then
        source "$localFile"
      fi
      
      CODE_NUM=$(( CODE_NUM + 1 ))
      CODE_NAME[CODE_NUM]="$NAME"
      CODE_TYPE[CODE_NUM]="$TYPE"
      if [[ -n "$DIR" && -d "$DIR" ]] ; then
        CODE_DIR[CODE_NUM]="$(readlink -f "$DIR")"
      else
        CODE_DIR[CODE_NUM]=""
      fi
      CODE_VOLUME[CODE_NUM]="$VOLUME"
      CODE_WEB_ROOT[CODE_NUM]="$WEB_ROOT"
      CODE_WEB_DOMAIN[CODE_NUM]="$WEB_DOMAIN"
    fi
  done
}